{% set message = service.request_message %}
{% set message_typename = service.request_message.type %}
{% include "msg__traits.hpp.template" %}
{% set message = service.response_message %}
{% set message_typename = service.response_message.type %}
{% include "msg__traits.hpp.template" %}
{% set message = service.event_message %}
{% set message_typename = service.event_message.type %}
{% include "msg__traits.hpp.template" %}

{% set service_typename = join(service.type.namespaces, "::") + "::" + service.type.name %}
{% set service_fully_qualified_name = join(service.type.namespaces, "/") + "/" + service.type.name %}
namespace rosidl_generator_traits
{

template<>
inline const char * data_type<{{ service_typename }}>()
{
  return "{{ service_typename }}";
}

template<>
inline const char * name<{{ service_typename }}>()
{
  return "{{ service_fully_qualified_name }}";
}

template<>
struct has_fixed_size<{{ service_typename }}>
  : std::integral_constant<
    bool,
    has_fixed_size<{{ service_typename }}_Request>::value &&
    has_fixed_size<{{ service_typename }}_Response>::value
  >
{
};

template<>
struct has_bounded_size<{{ service_typename }}>
  : std::integral_constant<
    bool,
    has_bounded_size<{{ service_typename }}_Request>::value &&
    has_bounded_size<{{ service_typename }}_Response>::value
  >
{
};

template<>
struct is_service<{{ service_typename }}>
  : std::true_type
{
};

template<>
struct is_service_request<{{ service_typename }}_Request>
  : std::true_type
{
};

template<>
struct is_service_response<{{ service_typename }}_Response>
  : std::true_type
{
};

}  // namespace rosidl_generator_traits
