{% set message = service.request_message %}
{% include "msg__type_support.h.template" %}

{% set message = service.response_message %}
{% include "msg__type_support.h.template" %}

{% set message = service.event_message %}
{% include "msg__type_support.h.template" %}

{% set header_file = "rosidl_runtime_c/service_type_support_struct.h" %}
{% set include_directives = get_global_variable("include_directives") %}
{% if header_file in include_directives %}
// already included above
// {{ "" -}}
{% else %}
{% set include_directives = set_global_variable("include_directives", push_back(include_directives, header_file)) %}
{% endif %}
#include "{{ header_file }}"

// Forward declare the get type support functions for this type.
ROSIDL_GENERATOR_C_PUBLIC_{{ package_name }}
const rosidl_service_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__SERVICE_SYMBOL_NAME(
  rosidl_typesupport_c,
{% for ns in service.type.namespaces %}
  {{ ns }},
{% endfor %}
  {{ service.type.name }}
)(void);

// Forward declare the function to create a service event message for this type.
ROSIDL_GENERATOR_C_PUBLIC_{{ package_name }}
void *
ROSIDL_TYPESUPPORT_INTERFACE__SERVICE_CREATE_EVENT_MESSAGE_SYMBOL_NAME(
  rosidl_typesupport_c,
{% for ns in service.type.namespaces %}
  {{ ns }},
{% endfor %}
  {{ service.type.name }}
)(
  const rosidl_service_introspection_info_t * info,
  rcutils_allocator_t * allocator,
  const void * request_message,
  const void * response_message);

// Forward declare the function to destroy a service event message for this type.
ROSIDL_GENERATOR_C_PUBLIC_{{ package_name }}
bool
ROSIDL_TYPESUPPORT_INTERFACE__SERVICE_DESTROY_EVENT_MESSAGE_SYMBOL_NAME(
  rosidl_typesupport_c,
{% for ns in service.type.namespaces %}
  {{ ns }},
{% endfor %}
  {{ service.type.name }}
)(
  void * event_msg,
  rcutils_allocator_t * allocator);
