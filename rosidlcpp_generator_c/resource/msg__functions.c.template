{% set message_typename = idl_structure_type_to_c_typename(message.type) %}
{% set array_typename = idl_structure_type_sequence_to_c_typename(message.type) %}
{#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#}
{# Collect necessary include directives for all members #}
{% set includes = get_includes(message, "__functions.h") %}
{#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#}
{% if includes %}

// Include directives for member types
{% for include in includes %}
{% for name in include.member_names %}
// Member `{{ name }}`
{% endfor %}
{% set include_directives = get_global_variable("include_directives") %}
{% if include.header_file in include_directives %}
// already included above
// {{ "" -}}
{% else %}
{% set include_directives = set_global_variable("include_directives", push_back(include_directives, include.header_file)) %}
{% endif %}
#include "{{ include.header_file }}"
{% endfor %}
{% endif %}
{#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#}

{########################################################################}
{# message functions #}
{########################################################################}
bool
{{ message_typename }}__init({{ message_typename }} * msg)
{
  if (!msg) {
    return false;
  }
{% set label_prefix = "abort_init_" %}
{% set last_label_index = 0 %}
{% set abort_lines = [] %}
{% for member in message.members %}
  // {{ member.name }}
{%   if member.type.name == "array" %}
{%     if is_primitive(member.type.value_type) %}
{%       if existsIn(member, "default") %}
{%   for default in member.default %}
  msg->{{ member.name }}[{{ loop.index }}] = {{ value_to_c(member.type.value_type, default) }};
{%   endfor %}
{%       endif %}
{%     else if is_string(member.type.value_type) or is_namespaced(member.type.value_type) %}
  for (size_t i = 0; i < {{ member.type.size }}; ++i) {
    if (!{{ basetype_to_c(member.type.value_type) }}__init(&msg->{{ member.name }}[i])) {
      {{ message_typename }}__fini(msg);
      return false;
    }
  }
{%     if existsIn(member, "default") %}
{%       for default in member.default %}
  {
    bool success = {{ basetype_to_c(member.type.value_type) }}__assign(&msg->{{ member.name }}[{{ loop.index }}], {{ value_to_c(member.type.value_type, default) }});
    if (!success) {
      goto {{ label_prefix }}{{ last_label_index }};
    }
{% set abort_lines = push_back(abort_lines, format("{:s}{}:", label_prefix, last_label_index)) %}
{% set abort_lines = push_back(abort_lines, format("  {}__fini(&msg->{}", basetype_to_c(member.type.value_type), format("{}[{}]);", member.name, loop.index))) %}
{%  set last_label_index = last_label_index + 1 %}
  }
{%       endfor %}
{%     endif %}
{%     endif %}
{%   else if member.type.name == "sequence" %}
{%     if not existsIn(member, "default") %}
  if (!{{ idl_type_to_c(member.type) }}__init(&msg->{{ member.name }}, 0)) {
    {{ message_typename }}__fini(msg);
    return false;
  }
{%     else %}
  {
    bool success = {{ idl_type_to_c(member.type) }}__init(&msg->{{ member.name }}, {{ length(member.default) }});
    if (!success) {
      goto {{ label_prefix }}{{ last_label_index }};
    }
{% set abort_lines = push_back(abort_lines, format("{}{}:", label_prefix, last_label_index)) %}
{% set abort_lines = push_back(abort_lines, format("  {}__fini(&msg->{});", idl_type_to_c(member.type), member.name)) %}
{%  set last_label_index = last_label_index + 1 %}
  }
{%   for default in member.default %}
{%     if is_string(member.type.value_type) %}
  {
    bool success = {{ basetype_to_c(member.type.value_type) }}__assign(&msg->{{ member.name }}.data[{{ loop.index }}], {{ value_to_c(member.type.value_type, default) }});
    if (!success) {
      goto {{ label_prefix }}{{ last_label_index }};
    }
{% set abort_lines = push_back(abort_lines, format("{:s}{}:", label_prefix, last_label_index)) %}
{% set abort_lines = push_back(abort_lines, format("  {}__fini(&msg->{}", idl_type_to_c(member.type.value_type), format("{}.data[{}]);", member.name, loop.index))) %}
{%  set last_label_index = last_label_index + 1 %}
  }
{%     else %}
  msg->{{ member.name }}.data[{{ loop.index }}] = {{ value_to_c(member.type.value_type, default) }};
{%     endif %}
{%   endfor %}
{%     endif %}
{%   else if is_namespaced(member.type) %}
  if (!{{ basetype_to_c(member.type) }}__init(&msg->{{ member.name }})) {
    {{ message_typename }}__fini(msg);
    return false;
  }
{%   else if is_string(member.type) %}
  if (!{{ basetype_to_c(member.type) }}__init(&msg->{{ member.name }})) {
    {{ message_typename }}__fini(msg);
    return false;
  }
{%   if existsIn(member, "default") %}
  {
    bool success = {{ basetype_to_c(member.type) }}__assign(&msg->{{ member.name }}, {{ value_to_c(member.type, member.default) }});
    if (!success) {
      goto {{ label_prefix }}{{ last_label_index }};
    }
{% set abort_lines = push_back(abort_lines, format("{}{}:", label_prefix, last_label_index)) %}
{% set abort_lines = push_back(abort_lines, format("  {}__fini(&msg->{});", basetype_to_c(member.type), member.name)) %}
{%  set last_label_index = last_label_index + 1 %}
  }
{%   endif %}
{%   else if is_primitive(member.type) %}
{%   if existsIn(member, "default") %}
  msg->{{ member.name }} = {{ value_to_c(member.type, member.default) }};
{%   endif %}
{%   endif %}
{% endfor %}
  return true;
{% if abort_lines %}
{%   for i in range(length(abort_lines)) %}
{% if not loop.is_first %}
{{ at(abort_lines, length(abort_lines) - i - 1) }}
{% endif %}
{%   endfor %}
  return false;
{% endif %}
}

void
{{ message_typename }}__fini({{ message_typename }} * msg)
{
  if (!msg) {
    return;
  }
{% for member in message.members %}
  // {{ member.name }}
{%   if member.type.name == "array" %}
{%     if is_primitive(member.type.value_type) %}
{%     else if is_string(member.type.value_type) or is_namespaced(member.type.value_type) %}
  for (size_t i = 0; i < {{ member.type.size }}; ++i) {
    {{ basetype_to_c(member.type.value_type) }}__fini(&msg->{{ member.name }}[i]);
  }
{%     endif %}
{%   else if member.type.name == "sequence" %}
  {{ idl_type_to_c(member.type) }}__fini(&msg->{{ member.name }});
{%   else if is_namespaced(member.type) %}
  {{ basetype_to_c(member.type) }}__fini(&msg->{{ member.name }});
{%   else if is_string(member.type) %}
  {{ basetype_to_c(member.type) }}__fini(&msg->{{ member.name }});
{%   endif %}
{% endfor %}
}

bool
{{ message_typename }}__are_equal(const {{ message_typename }} * lhs, const {{ message_typename }} * rhs)
{
  if (!lhs || !rhs) {
    return false;
  }
{% for member in message.members %}
  // {{ member.name }}
{%   if member.type.name == "array" %}
  for (size_t i = 0; i < {{ member.type.size }}; ++i) {
{%     if is_string(member.type.value_type) or is_namespaced(member.type.value_type) %}
    if (!{{ basetype_to_c(member.type.value_type) }}__are_equal(
        &(lhs->{{ member.name }}[i]), &(rhs->{{ member.name }}[i])))
    {
      return false;
    }
{%     else %}
    if (lhs->{{ member.name }}[i] != rhs->{{ member.name }}[i]) {
      return false;
    }
{%     endif %}
  }
{%   else if member.type.name == "sequence" %}
  if (!{{ idl_type_to_c(member.type) }}__are_equal(
      &(lhs->{{ member.name }}), &(rhs->{{ member.name }})))
  {
    return false;
  }
{%   else if is_namespaced(member.type) %}
  if (!{{ basetype_to_c(member.type) }}__are_equal(
      &(lhs->{{ member.name }}), &(rhs->{{ member.name }})))
  {
    return false;
  }
{%   else if is_string(member.type) %}
  if (!{{ basetype_to_c(member.type) }}__are_equal(
      &(lhs->{{ member.name }}), &(rhs->{{ member.name }})))
  {
    return false;
  }
{%   else %}
  if (lhs->{{ member.name }} != rhs->{{ member.name }}) {
    return false;
  }
{%   endif %}
{% endfor %}
  return true;
}

bool
{{ message_typename }}__copy(
  const {{ message_typename }} * input,
  {{ message_typename }} * output)
{
  if (!input || !output) {
    return false;
  }
{% for member in message.members %}
  // {{ member.name }}
{%   if member.type.name == "array" %}
  for (size_t i = 0; i < {{ member.type.size }}; ++i) {
{%     if is_string(member.type.value_type) or is_namespaced(member.type.value_type) %}
    if (!{{ basetype_to_c(member.type.value_type) }}__copy(
        &(input->{{ member.name }}[i]), &(output->{{ member.name }}[i])))
    {
      return false;
    }
{%     else %}
    output->{{ member.name }}[i] = input->{{ member.name }}[i];
{%     endif %}
  }
{%   else if member.type.name == "sequence" %}
  if (!{{ idl_type_to_c(member.type) }}__copy(
      &(input->{{ member.name }}), &(output->{{ member.name }})))
  {
    return false;
  }
{%   else if is_namespaced(member.type) %}
  if (!{{ basetype_to_c(member.type) }}__copy(
      &(input->{{ member.name }}), &(output->{{ member.name }})))
  {
    return false;
  }
{%   else if is_string(member.type) %}
  if (!{{ basetype_to_c(member.type) }}__copy(
      &(input->{{ member.name }}), &(output->{{ member.name }})))
  {
    return false;
  }
{%   else %}
  output->{{ member.name }} = input->{{ member.name }};
{%   endif %}
{% endfor %}
  return true;
}

{{ message_typename }} *
{{ message_typename }}__create(void)
{
  rcutils_allocator_t allocator = rcutils_get_default_allocator();
  {{ message_typename }} * msg = ({{ message_typename }} *)allocator.allocate(sizeof({{ message_typename }}), allocator.state);
  if (!msg) {
    return NULL;
  }
  memset(msg, 0, sizeof({{ message_typename }}));
  bool success = {{ message_typename }}__init(msg);
  if (!success) {
    allocator.deallocate(msg, allocator.state);
    return NULL;
  }
  return msg;
}

void
{{ message_typename }}__destroy({{ message_typename }} * msg)
{
  rcutils_allocator_t allocator = rcutils_get_default_allocator();
  if (msg) {
    {{ message_typename }}__fini(msg);
  }
  allocator.deallocate(msg, allocator.state);
}


{########################################################################}
{# array functions #}
{########################################################################}
bool
{{ array_typename }}__init({{ array_typename }} * array, size_t size)
{
  if (!array) {
    return false;
  }
  rcutils_allocator_t allocator = rcutils_get_default_allocator();
  {{ message_typename }} * data = NULL;

  if (size) {
    data = ({{ message_typename }} *)allocator.zero_allocate(size, sizeof({{ message_typename }}), allocator.state);
    if (!data) {
      return false;
    }
    // initialize all array elements
    size_t i;
    for (i = 0; i < size; ++i) {
      bool success = {{ message_typename }}__init(&data[i]);
      if (!success) {
        break;
      }
    }
    if (i < size) {
      // if initialization failed finalize the already initialized array elements
      for (; i > 0; --i) {
        {{ message_typename }}__fini(&data[i - 1]);
      }
      allocator.deallocate(data, allocator.state);
      return false;
    }
  }
  array->data = data;
  array->size = size;
  array->capacity = size;
  return true;
}

void
{{ array_typename }}__fini({{ array_typename }} * array)
{
  if (!array) {
    return;
  }
  rcutils_allocator_t allocator = rcutils_get_default_allocator();

  if (array->data) {
    // ensure that data and capacity values are consistent
    assert(array->capacity > 0);
    // finalize all array elements
    for (size_t i = 0; i < array->capacity; ++i) {
      {{ message_typename }}__fini(&array->data[i]);
    }
    allocator.deallocate(array->data, allocator.state);
    array->data = NULL;
    array->size = 0;
    array->capacity = 0;
  } else {
    // ensure that data, size, and capacity values are consistent
    assert(0 == array->size);
    assert(0 == array->capacity);
  }
}

{{ array_typename }} *
{{ array_typename }}__create(size_t size)
{
  rcutils_allocator_t allocator = rcutils_get_default_allocator();
  {{ array_typename }} * array = ({{ array_typename }} *)allocator.allocate(sizeof({{ array_typename }}), allocator.state);
  if (!array) {
    return NULL;
  }
  bool success = {{ array_typename }}__init(array, size);
  if (!success) {
    allocator.deallocate(array, allocator.state);
    return NULL;
  }
  return array;
}

void
{{ array_typename }}__destroy({{ array_typename }} * array)
{
  rcutils_allocator_t allocator = rcutils_get_default_allocator();
  if (array) {
    {{ array_typename }}__fini(array);
  }
  allocator.deallocate(array, allocator.state);
}

bool
{{ array_typename }}__are_equal(const {{ array_typename }} * lhs, const {{ array_typename }} * rhs)
{
  if (!lhs || !rhs) {
    return false;
  }
  if (lhs->size != rhs->size) {
    return false;
  }
  for (size_t i = 0; i < lhs->size; ++i) {
    if (!{{ message_typename }}__are_equal(&(lhs->data[i]), &(rhs->data[i]))) {
      return false;
    }
  }
  return true;
}

bool
{{ array_typename }}__copy(
  const {{ array_typename }} * input,
  {{ array_typename }} * output)
{
  if (!input || !output) {
    return false;
  }
  if (output->capacity < input->size) {
    const size_t allocation_size =
      input->size * sizeof({{ message_typename }});
    rcutils_allocator_t allocator = rcutils_get_default_allocator();
    {{ message_typename }} * data =
      ({{ message_typename }} *)allocator.reallocate(
      output->data, allocation_size, allocator.state);
    if (!data) {
      return false;
    }
    // If reallocation succeeded, memory may or may not have been moved
    // to fulfill the allocation request, invalidating output->data.
    output->data = data;
    for (size_t i = output->capacity; i < input->size; ++i) {
      if (!{{ message_typename }}__init(&output->data[i])) {
        // If initialization of any new item fails, roll back
        // all previously initialized items. Existing items
        // in output are to be left unmodified.
        for (; i-- > output->capacity; ) {
          {{ message_typename }}__fini(&output->data[i]);
        }
        return false;
      }
    }
    output->capacity = input->size;
  }
  output->size = input->size;
  for (size_t i = 0; i < input->size; ++i) {
    if (!{{ message_typename }}__copy(
        &(input->data[i]), &(output->data[i])))
    {
      return false;
    }
  }
  return true;
}
