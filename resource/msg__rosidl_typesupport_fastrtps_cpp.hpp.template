{% set include_directives = get_global_variable("include_directives") -%}
{% set header_files = ["cstddef", "rosidl_runtime_c/message_type_support_struct.h", "rosidl_typesupport_interface/macros.h"] %}
{% set include_base = package_name + "/" + interface_path.filedir + "/detail/" + convert_camel_case_to_lower_case_underscore(interface_path.filename) %}
{% set header_files = push_back(header_files, package_name + "/msg/rosidl_typesupport_fastrtps_cpp__visibility_control.h") %}
{% set header_files = push_back(header_files, include_base + "__struct.hpp") %}
{# #}
{% for header_file in header_files %}
{%     if header_file in include_directives %}
// already included above
// {%  else -%}
{% set include_directives = set_global_variable("include_directives", push_back(include_directives, header_file)) %}
{%     endif %}
{%     if not string_contains(header_file, "/") %}
#include <{{ header_file }}>
{%     else %}
#include "{{ header_file }}"
{%     endif %}
{% endfor %}

#ifndef _WIN32
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wunused-parameter"
# ifdef __clang__
#  pragma clang diagnostic ignored "-Wdeprecated-register"
#  pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
# endif
#endif
#ifndef _WIN32
# pragma GCC diagnostic pop
#endif

{% set header_files = ["fastcdr/Cdr.h"] %}
{% for header_file in header_files %}
{%     if header_file in include_directives %}
// already included above
// {%  else -%}
{% set include_directives = set_global_variable("include_directives", push_back(include_directives, header_file)) %}
{%     endif %}
#include "{{ header_file }}"
{% endfor %}

{% for ns in message.type.namespaces %}
namespace {{ ns }}
{

{% endfor %}
namespace typesupport_fastrtps_cpp
{

bool
ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
cdr_serialize(
  const {{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") + "::" + message.type.name }} & ros_message,
  eprosima::fastcdr::Cdr & cdr);

bool
ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
cdr_deserialize(
  eprosima::fastcdr::Cdr & cdr,
  {{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") + "::" + message.type.name }} & ros_message);

size_t
ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
get_serialized_size(
  const {{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") + "::" + message.type.name }} & ros_message,
  size_t current_alignment);

size_t
ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
max_serialized_size_{{ message.type.name }}(
  bool & full_bounded,
  bool & is_plain,
  size_t current_alignment);

bool
ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
cdr_serialize_key(
  const {{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") + "::" + message.type.name }} & ros_message,
  eprosima::fastcdr::Cdr &);

size_t
ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
get_serialized_size_key(
  const {{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") + "::" + message.type.name }} & ros_message,
  size_t current_alignment);

size_t
ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
max_serialized_size_key_{{ message.type.name }}(
  bool & full_bounded,
  bool & is_plain,
  size_t current_alignment);

}  // namespace typesupport_fastrtps_cpp
{% for i in range(length(message.type.namespaces)) %}

}  // namespace {{ at(message.type.namespaces, length(message.type.namespaces) - 1 - i) }}
{% endfor %}

#ifdef __cplusplus
extern "C"
{
#endif

ROSIDL_TYPESUPPORT_FASTRTPS_CPP_PUBLIC_{{ package_name }}
const rosidl_message_type_support_t *
  ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_fastrtps_cpp, {{ package_name + ", " + join(split_string(interface_path.filedir, "/"), ", ") }}, {{ message.type.name }})();

#ifdef __cplusplus
}
#endif
