{% set message_typename = join(message.type.namespaces, "::") + "::" + message.type.name %}
{% set message_fully_qualified_name = join(message.type.namespaces , "/") + "/" + message.type.name %}
{# Collect necessary include directives for all members #}
{% set includes = get_includes(message, "__traits.hpp") %}
{% set include_directives = get_global_variable("include_directives") %}
{% if includes %}

// Include directives for member types
{% for include in includes %}
{% for name in include.member_names %}
// Member '{{ name }}'
{% endfor %}
{% if include.header_file in include_directives %}
// already included above
// {{ "" -}}
{% else %}
{% set include_directives = set_global_variable("include_directives", push_back(include_directives, include.header_file)) %}
{% endif %}
#include "{{ include.header_file }}"
{% endfor %}
{% endif %}

{% set char_type = ["octet", "char", "wchar"] %}
{% for ns in message.type.namespaces %}
namespace {{ ns }}
{

{% endfor %}
inline void to_flow_style_yaml(
  const {{ message.type.name }} & msg,
  std::ostream & out)
{
{% set first_member = at(message.members, 0) %}
{% if length(message.members) == 1 and first_member.name == "structure_needs_at_least_one_member" %}
  (void)msg;
  out << "null";
{% else %}
  out << "{";
{% for i in range(length(message.members)) %}
{%   set member = at(message.members, i) %}
{%   if i != 0 %}

{%   endif %}
  // member: {{ member.name }}
  {
{%   if is_primitive(member.type) %}
    out << "{{ member.name }}: ";
{%     if member.type.name in char_type %}
    rosidl_generator_traits::character_value_to_yaml(msg.{{ member.name }}, out);
{%     else %}
    rosidl_generator_traits::value_to_yaml(msg.{{ member.name }}, out);
{%     endif %}
{%   else if is_string(member.type) %}
    out << "{{ member.name }}: ";
    rosidl_generator_traits::value_to_yaml(msg.{{ member.name }}, out);
{%   else if is_namespaced(member.type) %}
    out << "{{ member.name }}: ";
    to_flow_style_yaml(msg.{{ member.name }}, out);
{%   else if is_nestedtype(member.type) %}
    if (msg.{{ member.name }}.size() == 0) {
      out << "{{ member.name }}: []";
    } else {
      out << "{{ member.name }}: [";
      size_t pending_items = msg.{{ member.name }}.size();
      for (auto item : msg.{{ member.name }}) {
{%     if member.type.value_type.name in char_type %}
        rosidl_generator_traits::character_value_to_yaml(item, out);
{%     else if is_primitive(member.type.value_type) %}
        rosidl_generator_traits::value_to_yaml(item, out);
{%     else if is_string(member.type.value_type) %}
        rosidl_generator_traits::value_to_yaml(item, out);
{%     else if is_namespaced(member.type.value_type) %}
        to_flow_style_yaml(item, out);
{%     endif %}
        if (--pending_items > 0) {
          out << ", ";
        }
      }
      out << "]";
    }
{%   endif %}
{%   if i < length(message.members) - 1 %}
    out << ", ";
{%   endif %}
  }
{%   endfor %}
  out << "}";
{%   endif %}
}  // NOLINT(readability/fn_size)

inline void to_block_style_yaml(
  const {{ message.type.name }} & msg,
  std::ostream & out, size_t indentation = 0)
{
{% if length(message.members) == 1 and first_member.name == "structure_needs_at_least_one_member" %}
  (void)msg;
  (void)indentation;
  out << "null\n";
{% else %}
{%   for member in message.members %}
{%     if not loop.is_first %}

{%     endif %}
  // member: {{ member.name }}
  {
    if (indentation > 0) {
      out << std::string(indentation, ' ');
    }
{%    if is_primitive(member.type) %}
    out << "{{ member.name }}: ";
{%      if member.type.name in char_type %}
    rosidl_generator_traits::character_value_to_yaml(msg.{{ member.name }}, out);
{%      else %}
    rosidl_generator_traits::value_to_yaml(msg.{{ member.name }}, out);
{%      endif %}
    out << "\n";
{%    else if is_string(member.type) %}
    out << "{{ member.name }}: ";
    rosidl_generator_traits::value_to_yaml(msg.{{ member.name }}, out);
    out << "\n";
{%    else if is_namespaced(member.type) %}
    out << "{{ member.name }}:\n";
    to_block_style_yaml(msg.{{ member.name }}, out, indentation + 2);
{%    else if is_nestedtype(member.type) %}
    if (msg.{{ member.name }}.size() == 0) {
      out << "{{ member.name }}: []\n";
    } else {
      out << "{{ member.name }}:\n";
      for (auto item : msg.{{ member.name }}) {
        if (indentation > 0) {
          out << std::string(indentation, ' ');
        }
{%      if is_primitive(member.type.value_type) %}
        out << "- ";
{%        if member.type.value_type.name in char_type %}
        rosidl_generator_traits::character_value_to_yaml(item, out);
{%        else %}
        rosidl_generator_traits::value_to_yaml(item, out);
{%        endif %}
        out << "\n";
{%      else if is_string(member.type.value_type) %}
        out << "- ";
        rosidl_generator_traits::value_to_yaml(item, out);
        out << "\n";
{%      else if is_namespaced(member.type.value_type) %}
        out << "-\n";
        to_block_style_yaml(item, out, indentation + 2);
{%      endif%}
      }
    }
{%    endif%}
  }
{%   endfor %}
{% endif %}
}  // NOLINT(readability/fn_size)

inline std::string to_yaml(const {{ message.type.name }} & msg, bool use_flow_style = false)
{
  std::ostringstream out;
  if (use_flow_style) {
    to_flow_style_yaml(msg, out);
  } else {
    to_block_style_yaml(msg, out);
  }
  return out.str();
}
{% for ns in custom_range(length(message.type.namespaces) - 1, -1, -1) %}

}  // namespace {{ at(message.type.namespaces, ns) }}
{% endfor %}

namespace rosidl_generator_traits
{

{% set message_namespace = join(message.type.namespaces, "::") %}
{% if ROS_DISTRO == "jazzy" or ROS_DISTRO == "kilted" %}
[[deprecated("use {{ message_namespace }}::to_block_style_yaml() instead")]]
inline void to_yaml(
  const {{ message_typename }} & msg,
  std::ostream & out, size_t indentation = 0)
{
  {{ message_namespace }}::to_block_style_yaml(msg, out, indentation);
}

[[deprecated("use {{ message_namespace}}::to_yaml() instead")]]
inline std::string to_yaml(const {{ message_typename }} & msg)
{
  return {{ message_namespace }}::to_yaml(msg);
}

{% endif %}
template<>
inline const char * data_type<{{ message_typename }}>()
{
  return "{{ message_typename }}";
}

template<>
inline const char * name<{{ message_typename }}>()
{
  return "{{ message_fully_qualified_name }}";
}

{% set fixed_template_strings = get_fixed_template_strings(message.members) %}
template<>
struct has_fixed_size<{{ message_typename }}>
  : std::integral_constant<bool, {{ join(sort(fixed_template_strings), " && ") }}> {};

{% set bounded_template_strings = get_bounded_template_strings(message.members) %}
template<>
struct has_bounded_size<{{ message_typename }}>
  : std::integral_constant<bool, {{ join(sort(bounded_template_strings), " && ") }}> {};

template<>
struct is_message<{{ message_typename }}>
  : std::true_type {};

}  // namespace rosidl_generator_traits
