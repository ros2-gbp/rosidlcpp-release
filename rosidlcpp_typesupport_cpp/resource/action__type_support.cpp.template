{% set include_directives = get_global_variable("include_directives") %}
{% set include_base = package_name + "/" + interface_path.filedir + "/detail/" + convert_camel_case_to_lower_case_underscore(interface_path.filename) %}
{# #}
{% set header_files = ["action_msgs/msg/goal_status_array.hpp", "action_msgs/srv/cancel_goal.hpp"] %}
{% set header_files = push_back(header_files, include_base + "__struct.hpp") %}
{% set header_files = push_back(header_files, "rosidl_typesupport_cpp/visibility_control.h") %}
{% set header_files = push_back(header_files, "rosidl_runtime_c/action_type_support_struct.h") %}
{% set header_files = push_back(header_files, "rosidl_typesupport_cpp/action_type_support.hpp") %}
{% set header_files = push_back(header_files, "rosidl_typesupport_cpp/message_type_support.hpp") %}
{% set header_files = push_back(header_files, "rosidl_typesupport_cpp/service_type_support.hpp") %}

{% for header_file in header_files %}
{% if header_file in include_directives %}
// already included above
// {% else -%}
{% set include_directives = set_global_variable("include_directives", push_back(include_directives, header_file)) %}
{% endif %}
#include "{{ header_file }}"
{% endfor %}

{% for ns in action.type.namespaces %}
namespace {{ ns }}
{

{% endfor %}
namespace rosidl_typesupport_cpp
{

static rosidl_action_type_support_t {{ interface_path.filename }}_action_type_support_handle = {
  NULL, NULL, NULL, NULL, NULL,
  &{{ idl_structure_type_to_c_typename(action.type) }}__{{ GET_HASH_FUNC }},
  &{{ idl_structure_type_to_c_typename(action.type) }}__{{ GET_DESCRIPTION_FUNC }},
  &{{ idl_structure_type_to_c_typename(action.type) }}__{{ GET_SOURCES_FUNC }},
};

}  // namespace rosidl_typesupport_cpp
{% for i in range(length(action.type.namespaces)) %}

}  // namespace {{ at(action.type.namespaces, length(action.type.namespaces) - 1 - i) }}
{% endfor %}

namespace rosidl_typesupport_cpp
{

template<>
ROSIDL_TYPESUPPORT_CPP_PUBLIC
const rosidl_action_type_support_t *
get_action_type_support_handle<{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::{{ interface_path.filename }}>()
{
  using ::{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::rosidl_typesupport_cpp::{{ interface_path.filename }}_action_type_support_handle;
  // Thread-safe by always writing the same values to the static struct
  {{ interface_path.filename }}_action_type_support_handle.goal_service_type_support = get_service_type_support_handle<::{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::{{ interface_path.filename }}::Impl::SendGoalService>();
  {{ interface_path.filename }}_action_type_support_handle.result_service_type_support = get_service_type_support_handle<::{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::{{ interface_path.filename }}::Impl::GetResultService>();
  {{ interface_path.filename }}_action_type_support_handle.cancel_service_type_support = get_service_type_support_handle<::{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::{{ interface_path.filename }}::Impl::CancelGoalService>();
  {{ interface_path.filename }}_action_type_support_handle.feedback_message_type_support = get_message_type_support_handle<::{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::{{ interface_path.filename }}::Impl::FeedbackMessage>();
  {{ interface_path.filename }}_action_type_support_handle.status_message_type_support = get_message_type_support_handle<::{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::{{ interface_path.filename }}::Impl::GoalStatusMessage>();
  return &{{ interface_path.filename }}_action_type_support_handle;
}

}  // namespace rosidl_typesupport_cpp

#ifdef __cplusplus
extern "C"
{
#endif

ROSIDL_TYPESUPPORT_CPP_PUBLIC
const rosidl_action_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__ACTION_SYMBOL_NAME(rosidl_typesupport_cpp, {{ package_name + ", " + join(split_string(interface_path.filedir, "/"), ", ") }}, {{ interface_path.filename }})() {
  return ::rosidl_typesupport_cpp::get_action_type_support_handle<{{ package_name + "::" + join(split_string(interface_path.filedir, "/"), "::") }}::{{ interface_path.filename }}>();
}

#ifdef __cplusplus
}
#endif